# AUTOGENERATED BY NBDEV! DO NOT EDIT!

__all__ = ["index", "modules", "custom_doc_links", "git_url"]

index = {"Criterion": "0_criteria.ipynb",
         "WeightedCriterion": "0_criteria.ipynb",
         "CombinedCriterion": "0_criteria.ipynb",
         "SupervisedCriterion": "1_supervised_criteria.ipynb",
         "WeightedBCE": "1_supervised_criteria.ipynb",
         "WeightedFocal": "1_supervised_criteria.ipynb",
         "Dice": "1_supervised_criteria.ipynb",
         "Tversky": "1_supervised_criteria.ipynb",
         "FocalTversky": "1_supervised_criteria.ipynb",
         "IoU": "1_supervised_criteria.ipynb",
         "VoxelAccuracy": "1_supervised_criteria.ipynb",
         "BalancedVoxelAccuracy": "1_supervised_criteria.ipynb",
         "L2Accuracy": "1_supervised_criteria.ipynb",
         "UnsupervisedCriterion": "2_unsupervised_criteria.ipynb",
         "Compliance": "2_unsupervised_criteria.ipynb",
         "Volume": "2_unsupervised_criteria.ipynb",
         "VolumeFraction": "2_unsupervised_criteria.ipynb",
         "VolumeConstraint": "2_unsupervised_criteria.ipynb",
         "ForcesUnderpinned": "2_unsupervised_criteria.ipynb",
         "MaxStress": "2_unsupervised_criteria.ipynb",
         "StressConstraint": "2_unsupervised_criteria.ipynb",
         "Fail": "2_unsupervised_criteria.ipynb",
         "StressEfficiency": "2_unsupervised_criteria.ipynb",
         "Binariness": "2_unsupervised_criteria.ipynb",
         "CSVConverter": "0_csv_converter.ipynb",
         "TopoDataset": "1_topo_dataset.ipynb",
         "CombinedTopoDataset": "1_topo_dataset.ipynb",
         "CreateBasicProblems": "2_basic_dataset.ipynb",
         "BasicDataset": "2_basic_dataset.ipynb",
         "CSVDataset": "3_csv_dataset.ipynb",
         "SELTODataset": "4_selto_dataset.ipynb",
         "SIMPDataset": "5_simp_dataset.ipynb",
         "DensityFilter": "0_density_filters.ipynb",
         "MaxPoolDensityFilter": "0_density_filters.ipynb",
         "ConvolutionDensityFilter": "0_density_filters.ipynb",
         "UniformDensityFilter": "0_density_filters.ipynb",
         "RadialDensityFilter": "0_density_filters.ipynb",
         "DensityRepresenter": "1_density_representer.ipynb",
         "FilteringDensityRepresenter": "2_filtering_density_representer.ipynb",
         "filter_fcts": "2_filtering_density_representer.ipynb",
         "DeepImagePriorDensityRepresenter": "3_deep_image_prior_density_representer.ipynb",
         "ConvolutionalBlock": "0_conv_block.ipynb",
         "EncodingBlock": "1_encoder.ipynb",
         "Encoder": "1_encoder.ipynb",
         "DecodingBlock": "2_decoder.ipynb",
         "Decoder": "2_decoder.ipynb",
         "UNet": "3_unet.ipynb",
         "UNet3D": "3_unet.ipynb",
         "DeepImagePrior": "4_deep_image_prior.ipynb",
         "EquivarianceWrapper": "5_equivariance.ipynb",
         "EquivariantModel": "5_equivariance.ipynb",
         "AutogradLinearSolver": "0_linear_solvers.ipynb",
         "LinearSolver": "0_linear_solvers.ipynb",
         "SparseLinearSolver": "0_linear_solvers.ipynb",
         "PDESolver": "1_pde_solver.ipynb",
         "FDMDerivatives": "2_fdm_derivatives.ipynb",
         "FDMAdjointDerivatives": "2_fdm_derivatives.ipynb",
         "FDMAssembly": "3_fdm_assembly.ipynb",
         "UnpaddedFDM": "4_unpadded_fdm.ipynb",
         "FDM": "5_fdm_solver.ipynb",
         "Voxels": "3d_plotting.ipynb",
         "plot_scalar_field": "3d_plotting.ipynb",
         "pyvista_plot_scalar_field": "3d_plotting.ipynb",
         "plot_vector_field": "3d_plotting.ipynb",
         "plot_curve": "logs_plotting.ipynb",
         "plot_logs": "logs_plotting.ipynb",
         "Preprocessing": "0_preprocessing.ipynb",
         "CombinedPreprocessing": "0_preprocessing.ipynb",
         "ProblemPreprocessing": "1_problem_preprocessing.ipynb",
         "TrivialPreprocessing": "1_problem_preprocessing.ipynb",
         "ForcePreprocessing": "1_problem_preprocessing.ipynb",
         "ConvexHullPreprocessing": "1_problem_preprocessing.ipynb",
         "SolutionPreprocessing": "2_solution_preprocessing.ipynb",
         "PDEPreprocessing": "2_solution_preprocessing.ipynb",
         "DensityPreprocessing": "2_solution_preprocessing.ipynb",
         "PlottingForProblem": "0_plotting_for_problem.ipynb",
         "InputCheckerForProblem": "1_input_checker_for_problem.ipynb",
         "Problem": "2_problem.ipynb",
         "add_corners": "0_plotting_for_solution.ipynb",
         "PlottingForSolution": "0_plotting_for_solution.ipynb",
         "Solution": "1_solution.ipynb",
         "EvalModule": "0_eval_module.ipynb",
         "TrainModuleVerboseUtils": "1_training_module.ipynb",
         "EpochLossGetter": "1_training_module.ipynb",
         "TrainModule": "1_training_module.ipynb",
         "TopoSolver": "2_topo_solver.ipynb",
         "TrivialSolver": "3_trivial_solver.ipynb",
         "SIMPIterator": "4_simp_iterator.ipynb",
         "SIMP": "5_simp.ipynb",
         "OracleSolver": "6_oracle_topo_solver.ipynb",
         "TrainableTopoSolver": "7_trainable_topo_solver.ipynb",
         "infect": "infection.ipynb",
         "get_current_datetime_as_string": "utils.ipynb",
         "create_dir": "utils.ipynb",
         "save_dict_as_txt": "utils.ipynb",
         "cast_to_problem": "utils.ipynb",
         "cast_to_solution": "utils.ipynb",
         "cast_to_problems": "utils.ipynb",
         "cast_to_solutions": "utils.ipynb",
         "get_dataloader": "utils.ipynb",
         "get_Ïƒ_vm": "utils.ipynb"}

modules = ["criteria.py",
           "datasets.py",
           "density_filters.py",
           "density_representers.py",
           "models.py",
           "pde.py",
           "preprocessing.py",
           "problem.py",
           "solution.py",
           "topo_solvers.py",
           "utils.py"]

doc_url = "//dl4to"

git_url = "https://github.com/erzmann/dl4to/tree/master/"

def custom_doc_links(name): return None
